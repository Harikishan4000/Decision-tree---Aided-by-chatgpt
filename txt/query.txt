Your job is to convert the a set of statements which represent certain events into decision tree nodes and convert them into json format. Create a decision tree node for each statement. There must be three types of nodes, decision node and cost node and leaf node.
Decision nodes are those that lead to other events taking place. They do not have probabilities attached to them.
Cost nodes are the nodes whose children have certain probabilities associated with them. 
The leaf nodes are the nodes that do not have any children. They always This can be either positive or negative values.  Make sure to create leaf nodes if required.
Each node can have only one parent node but a parent can have multiple children nodes.
Create the output in json format with fields:
id: root node is 0 and increment the id for each new node
name of node: Mentions the name of the node,
type of node: Mentions if it is "cost", "decision", "root" or "leaf"
level: Mentions the level at which the node is present with respect to the root node,
payoff: if it is a cost node,
probability: if it is a decision node,
parent: id of the parent of the current node
children: which consists of the array of the ids of the children of the current node, empty array if it has no children

Note that while creating the json script: 
1. Make sure all characters are lowercase
2. The first node is always of type "root"
3. If a node has a parent, its id should be present in the children array of only that parent and nothing else.
4. respond only with the json script and nothing else
5. Make sure all the fields of the json exist at all times.
6. Name the nodes appropriately.
7. Don't make new nodes just for the payoffs, add the payoff to the appropriate existing node
8. If there is not payoff given with the node, keep it as null.
9. If there is no probability given with the node, keep it as null.
10.  Convert all probabilities to decimal values.
11. Make sure the children array is filled if the node has children, or if any other node refers to it as a parent
12. If the node's children have probability, always make the current node a cost node
13. If the node's children array is empty, make it a leaf type node.

If you ski you will win with a probability of 0.1 and lose with a probability of 0.9.
The probability of leg being broken is 20% and the probability of leg not broken is 80%. 
If you win the race and the leg isn't broken, pay off is 100.
If you win and your leg is broken Pay off is 50.
If you lose and leg isn't broken pay off is 0.
If you lose and your leg is broken payoff is -50.
If you don't ski then if you are leg is broken pay off is -10.
If leg isn't broken your pay off is 0.



















Your job is to convert the a set of statements which represent certain events into decision tree nodes and convert them into single dimensional array JSON format. Create a decision tree node for each statement. There must be two types of nodes, decision node and cost node.Decision nodes are those that lead to other events taking place. They do not have probabilities attached to them. Cost nodes are the nodes whose children have certain probabilities associated with them. The nodes at the end are the nodes that do not have any children. They can be either have positive or negative values. Each node can have only one parent node but a parent can have multiple children nodes. Create the output in json format with fields: \n id: root node is 0 and increment the id for each new node\n name of node: Mentions the name of the node, type of node: Mentions if it is \"cost\", \"decision\", or \"root-decision\" "\n level: Mentions the level at which the node is present with respect to the root node,\n payoff: if it is a cost node, \n probability: if it is a decision node,\n parent: id of the parent of the current node\n children: which consists of the array of the ids of the children of the current node, empty array if it has no children\n\n Note that while creating the JSON data: \n 1. Make sure all characters are lowercase\n2. The first node is always of type \"root\"\n 3. If a node has a parent, its id should be present in the children array of only that parent and nothing else.\n 4. Do not give any conclusions or extra information about why you came to that answer, just give a single dimensional JSON format as the response.\n 5. Make sure all the fields of the json exist at all times.\n6. Name the nodes appropriately.\n 7. Don't make new nodes just for the payoffs, add the payoff to the appropriate existing node\n 8. If there is not payoff given with the node, keep it as null.\n 9. If there is no probability given with the node, keep it as null.\n 10.  Convert all probabilities to decimal values.\n 11. Make sure the children array is filled if the node has children, or if any other node refers to it as a parent.\n 12. If the node's children have probability, always make the current node a cost node.\n 13. If the node's children array is empty, consider it to be an end node with value.\n\n14. Make sure that this entire JSON has only a single dimensional unnamed array to encapsulate the entire rest of the data.\n\n 15. If there is no input, return empty JSON data. \n\n
              ###
              ${prompt}



Your only job is to analyse the statements passed which represent certain events and convert the statements into decision tree nodes and return them as a single dimentional array in JSON format.
There must be three types of nodes: Root node, Decision node and Cost node.
Root node is the top-most node.
Decision nodes are those that lead to other events taking place. They do not have probabilities attached to them.
Cost nodes are the nodes whose children have certain probabilities associated with them. The bottom-most are the nodes that do not have any children.They can be either have positive or negative values. 
Any node can have only one parent node.
Any node can have multiple children nodes.

Create the output in json format with fields:
id: root node is 0 and increment the id for each new node.
name: Mentions the name of the node.
type: Mentions if it is \"cost\" node, \"decision\" node, or \"root\" node.
level: Mentions the level at which the node is present with respect to the root node.
payoff: Mentions the payoff if it is a cost node.
probability: Mentions the probability if it is a decision node.
parent: id of the parent of the current node.
children: which consists of the array of the ids of the children of the current node. Return an empty array if it has no children.

Note that while creating the JSON data:
1. Make sure all characters are lowercase
2. First node is always a Root node, that is, it's type is "root".
3. If a node has a parent node, it's id should be present in the children array of only that parent and nothing in no other children array.
4. Do not give any extra information, just give a single dimensional JSON format as the response. This is very important and should be followed at all times.
5. Make sure all the fields of the JSON exist at all times.
6. Name the nodes appropriately. Make sure the names do not exceed 15 characters
7. If there is not payoff given with the node, keep it as null.
8. If there is no probability given with the node, keep it as null.
9. Convert all probabilities to decimal values.
10. Make sure the children array is filled if the node has children, or if any other node refers to it as a parent.
11. If the node's children have probability, always make the current node a cost node.
12. If the node's children array is empty, consider it to be an end node with value.
13. Make sure that this entire JSON has only a single dimensional unnamed array to encapsulate the entire rest of the data.
14. If no input is provided or insufficient input is provided, respond with an empty array. This is extremely inportant and should be followed at all times.
15. All nodes except the root node has a parent.














7. Don't make new nodes just for the payoffs, add the payoff to the appropriate existing node